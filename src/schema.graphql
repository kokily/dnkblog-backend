type MeType {
  id: ID!
  username: String!
  email: String
  profile: String
  admin: Boolean!
  githubId: String
  googleId: String
}

type CheckMeResponse {
  ok: Boolean!
  error: String
  user: MeType
}

type Query {
  CheckMe: CheckMeResponse!
}

type LoginEmailResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  LoginEmail(email: String!, password: String!): LoginEmailResponse!
  Logout: LogoutResponse!
  RegisterEmail(username: String!, email: String!, password: String!): RegisterEmailResponse!
  AddPost(category: String!, title: String!, body: String!, thumbnail: String, tags: [String]!): AddPostResponse!
}

type LogoutResponse {
  ok: Boolean!
  error: String
}

type RegisterEmailResponse {
  ok: Boolean!
  error: String
}

type AddPostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type Post {
  id: ID!
  category: String!
  title: String!
  body: String!
  thumbnail: String
  tags: [String]!
  created_at: Date!
  updated_at: Date
}

scalar Date

type User {
  id: ID!
  username: String!
  email: String
  password: String
  profile: String
  admin: Boolean!
  verify_key: String
  verified: Boolean!
  githubId: String
  googleId: String
  token_version: Int!
  created_at: Date
  updated_at: Date
}
